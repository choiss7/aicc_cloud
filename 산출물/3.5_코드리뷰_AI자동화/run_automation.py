#!/usr/bin/env python3
"""
AICC 3.5 ÏΩîÎìú Î¶¨Î∑∞ Î∞è Ïª§ÏÑú AI ÌôúÏö© ÏûêÎèôÌôî Î©îÏù∏ Ïã§ÌñâÍ∏∞
- ÏΩîÎìú Î∂ÑÏÑù Î∞è Î¶¨Î∑∞
- ÌÖåÏä§Ìä∏ ÏûêÎèôÌôî
- ÌíàÏßà Í≤ÄÏÇ¨
- Î¨∏ÏÑúÌôî ÏÉùÏÑ±
"""

import os
import sys
import asyncio
import argparse
from pathlib import Path
from datetime import datetime
import logging

# ÌòÑÏû¨ ÎîîÎ†âÌÜ†Î¶¨Î•º Python Í≤ΩÎ°úÏóê Ï∂îÍ∞Ä
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Î™®Îìà ÏûÑÌè¨Ìä∏
try:
    from AIÏûêÎèôÌôîÎèÑÍµ¨.cursor_ai_automation import CursorAIAutomation
    from ÌíàÏßàÍ¥ÄÎ¶¨.test_automation import TestAutomation
    from Î¨∏ÏÑúÌôî.doc_generator import DocumentationGenerator
except ImportError as e:
    print(f"Î™®Îìà ÏûÑÌè¨Ìä∏ Ïã§Ìå®: {e}")
    print("ÌïÑÏöîÌïú ÌååÏùºÎì§Ïù¥ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏùÑ Ïàò ÏûàÏäµÎãàÎã§.")
    sys.exit(1)

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('automation.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AIAutomationRunner:
    """AI ÏûêÎèôÌôî Ïã§ÌñâÍ∏∞"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.output_dir = self.project_root / "ÏÇ∞Ï∂úÎ¨º/3.5_ÏΩîÎìúÎ¶¨Î∑∞_AIÏûêÎèôÌôî"
        
    async def run_full_automation(self) -> dict:
        """Ï†ÑÏ≤¥ ÏûêÎèôÌôî ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìñâ"""
        logger.info("üöÄ AICC 3.5 ÏΩîÎìú Î¶¨Î∑∞ Î∞è AI ÏûêÎèôÌôî ÏãúÏûë")
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "status": "success",
            "stages": {}
        }
        
        try:
            # 1. ÏΩîÎìú Î∂ÑÏÑù Î∞è Î¶¨Î∑∞
            logger.info("üìä 1Îã®Í≥Ñ: ÏΩîÎìú Î∂ÑÏÑù Î∞è Î¶¨Î∑∞")
            cursor_automation = CursorAIAutomation(str(self.project_root))
            analysis_result = await cursor_automation.run_automation()
            results["stages"]["code_analysis"] = {
                "status": "completed",
                "files_analyzed": analysis_result["analysis_summary"]["files_analyzed"],
                "tests_generated": analysis_result["test_generation_summary"]["test_files_generated"]
            }
            logger.info("‚úÖ ÏΩîÎìú Î∂ÑÏÑù ÏôÑÎ£å")
            
            # 2. ÌÖåÏä§Ìä∏ ÏûêÎèôÌôî
            logger.info("üß™ 2Îã®Í≥Ñ: ÌÖåÏä§Ìä∏ ÏûêÎèôÌôî")
            test_automation = TestAutomation(str(self.project_root))
            test_result = await test_automation.run_all_tests()
            results["stages"]["test_automation"] = {
                "status": "completed",
                "total_tests": test_result.total_tests,
                "passed_tests": test_result.passed_tests,
                "coverage": f"{test_result.overall_coverage:.1f}%"
            }
            logger.info("‚úÖ ÌÖåÏä§Ìä∏ ÏûêÎèôÌôî ÏôÑÎ£å")
            
            # 3. Î¨∏ÏÑúÌôî ÏÉùÏÑ±
            logger.info("üìö 3Îã®Í≥Ñ: Î¨∏ÏÑúÌôî ÏÉùÏÑ±")
            doc_generator = DocumentationGenerator(str(self.project_root))
            doc_result = await doc_generator.generate_documentation()
            results["stages"]["documentation"] = {
                "status": "completed",
                "services_documented": len(doc_result.services),
                "documents_generated": 4  # API, README, CHANGELOG, ARCHITECTURE
            }
            logger.info("‚úÖ Î¨∏ÏÑúÌôî ÏÉùÏÑ± ÏôÑÎ£å")
            
            # 4. Ï¢ÖÌï© Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
            logger.info("üìã 4Îã®Í≥Ñ: Ï¢ÖÌï© Î≥¥Í≥†ÏÑú ÏÉùÏÑ±")
            await self._generate_summary_report(results, analysis_result, test_result, doc_result)
            results["stages"]["summary_report"] = {
                "status": "completed",
                "report_path": str(self.output_dir / "automation_summary.html")
            }
            logger.info("‚úÖ Ï¢ÖÌï© Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏôÑÎ£å")
            
        except Exception as e:
            logger.error(f"‚ùå ÏûêÎèôÌôî ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìå®: {e}")
            results["status"] = "failed"
            results["error"] = str(e)
            raise
        
        logger.info("üéâ AICC 3.5 ÏûêÎèôÌôî ÌîÑÎ°úÏÑ∏Ïä§ ÏôÑÎ£å!")
        return results
    
    async def run_code_analysis_only(self) -> dict:
        """ÏΩîÎìú Î∂ÑÏÑùÎßå Ïã§Ìñâ"""
        logger.info("üìä ÏΩîÎìú Î∂ÑÏÑù Ïã§Ìñâ")
        cursor_automation = CursorAIAutomation(str(self.project_root))
        return await cursor_automation.run_automation()
    
    async def run_test_automation_only(self) -> dict:
        """ÌÖåÏä§Ìä∏ ÏûêÎèôÌôîÎßå Ïã§Ìñâ"""
        logger.info("üß™ ÌÖåÏä§Ìä∏ ÏûêÎèôÌôî Ïã§Ìñâ")
        test_automation = TestAutomation(str(self.project_root))
        result = await test_automation.run_all_tests()
        return {
            "total_tests": result.total_tests,
            "passed_tests": result.passed_tests,
            "failed_tests": result.failed_tests,
            "coverage": result.overall_coverage
        }
    
    async def run_documentation_only(self) -> dict:
        """Î¨∏ÏÑúÌôîÎßå Ïã§Ìñâ"""
        logger.info("üìö Î¨∏ÏÑúÌôî ÏÉùÏÑ± Ïã§Ìñâ")
        doc_generator = DocumentationGenerator(str(self.project_root))
        result = await doc_generator.generate_documentation()
        return {
            "services_documented": len(result.services),
            "timestamp": result.timestamp
        }
    
    async def _generate_summary_report(self, results: dict, analysis_result: dict, 
                                     test_result, doc_result) -> None:
        """Ï¢ÖÌï© Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
        
        # HTML Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
        html_content = f"""
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AICC 3.5 ÏûêÎèôÌôî Ï¢ÖÌï© Î≥¥Í≥†ÏÑú</title>
    <style>
        body {{ 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        .container {{ 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white; 
            border-radius: 15px; 
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        .header {{ 
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white; 
            padding: 40px; 
            text-align: center; 
        }}
        .header h1 {{ 
            margin: 0; 
            font-size: 2.5em; 
            font-weight: 300;
        }}
        .header p {{ 
            margin: 10px 0 0 0; 
            opacity: 0.8; 
            font-size: 1.1em;
        }}
        .content {{ 
            padding: 40px; 
        }}
        .stage-grid {{ 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); 
            gap: 30px; 
            margin: 30px 0; 
        }}
        .stage-card {{ 
            background: #f8f9fa; 
            border-radius: 10px; 
            padding: 25px; 
            border-left: 5px solid #28a745;
            transition: transform 0.3s ease;
        }}
        .stage-card:hover {{
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }}
        .stage-card h3 {{ 
            margin: 0 0 15px 0; 
            color: #2c3e50; 
            font-size: 1.3em;
        }}
        .stage-card .emoji {{ 
            font-size: 2em; 
            margin-bottom: 10px; 
            display: block;
        }}
        .metrics {{ 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 20px; 
            margin: 30px 0; 
        }}
        .metric {{ 
            text-align: center; 
            padding: 20px; 
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white; 
            border-radius: 10px;
        }}
        .metric-value {{ 
            font-size: 2.5em; 
            font-weight: bold; 
            margin-bottom: 5px;
        }}
        .metric-label {{ 
            font-size: 0.9em; 
            opacity: 0.9;
        }}
        .summary {{ 
            background: #e8f5e8; 
            border-radius: 10px; 
            padding: 25px; 
            margin: 30px 0;
            border-left: 5px solid #28a745;
        }}
        .footer {{ 
            text-align: center; 
            padding: 30px; 
            background: #f8f9fa; 
            color: #6c757d;
            border-top: 1px solid #dee2e6;
        }}
        .status-badge {{ 
            display: inline-block; 
            padding: 5px 15px; 
            border-radius: 20px; 
            font-size: 0.9em; 
            font-weight: bold;
        }}
        .status-success {{ 
            background: #d4edda; 
            color: #155724; 
        }}
        .progress-bar {{ 
            background: #e9ecef; 
            border-radius: 10px; 
            overflow: hidden; 
            height: 8px; 
            margin: 10px 0;
        }}
        .progress-fill {{ 
            background: linear-gradient(90deg, #28a745, #20c997); 
            height: 100%; 
            transition: width 0.3s ease;
        }}
        table {{ 
            width: 100%; 
            border-collapse: collapse; 
            margin: 20px 0; 
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        th, td {{ 
            padding: 15px; 
            text-align: left; 
            border-bottom: 1px solid #dee2e6;
        }}
        th {{ 
            background: #f8f9fa; 
            font-weight: 600;
            color: #495057;
        }}
        .highlight {{ 
            background: linear-gradient(120deg, #a8edea 0%, #fed6e3 100%);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ AICC 3.5 ÏûêÎèôÌôî Î≥¥Í≥†ÏÑú</h1>
            <p>ÏΩîÎìú Î¶¨Î∑∞ Î∞è Ïª§ÏÑú AI ÌôúÏö© ÏûêÎèôÌôî Í≤∞Í≥º</p>
            <span class="status-badge status-success">‚úÖ ÏôÑÎ£å</span>
        </div>
        
        <div class="content">
            <div class="highlight">
                <h2>üìä Ï†ÑÏ≤¥ ÏöîÏïΩ</h2>
                <p><strong>Ïã§Ìñâ ÏãúÍ∞Ñ:</strong> {results['timestamp']}</p>
                <p><strong>ÏÉÅÌÉú:</strong> {results['status'].upper()}</p>
                <p><strong>ÏôÑÎ£åÎêú Îã®Í≥Ñ:</strong> {len([s for s in results['stages'].values() if s['status'] == 'completed'])}/4</p>
            </div>
            
            <div class="metrics">
                <div class="metric">
                    <div class="metric-value">{analysis_result['analysis_summary']['files_analyzed']}</div>
                    <div class="metric-label">Î∂ÑÏÑùÎêú ÌååÏùº</div>
                </div>
                <div class="metric">
                    <div class="metric-value">{test_result.total_tests}</div>
                    <div class="metric-label">Ïã§ÌñâÎêú ÌÖåÏä§Ìä∏</div>
                </div>
                <div class="metric">
                    <div class="metric-value">{test_result.overall_coverage:.1f}%</div>
                    <div class="metric-label">ÌÖåÏä§Ìä∏ Ïª§Î≤ÑÎ¶¨ÏßÄ</div>
                </div>
                <div class="metric">
                    <div class="metric-value">{len(doc_result.services)}</div>
                    <div class="metric-label">Î¨∏ÏÑúÌôîÎêú ÏÑúÎπÑÏä§</div>
                </div>
            </div>
            
            <h2>üîÑ Ïã§Ìñâ Îã®Í≥Ñ</h2>
            <div class="stage-grid">
                <div class="stage-card">
                    <span class="emoji">üìä</span>
                    <h3>ÏΩîÎìú Î∂ÑÏÑù Î∞è Î¶¨Î∑∞</h3>
                    <p><strong>ÏÉÅÌÉú:</strong> <span class="status-badge status-success">ÏôÑÎ£å</span></p>
                    <p><strong>Î∂ÑÏÑùÎêú ÌååÏùº:</strong> {analysis_result['analysis_summary']['files_analyzed']}Í∞ú</p>
                    <p><strong>ÏÉùÏÑ±Îêú ÌÖåÏä§Ìä∏:</strong> {analysis_result['test_generation_summary']['test_files_generated']}Í∞ú</p>
                    <p><strong>Ï¥ù ÏΩîÎìú ÎùºÏù∏:</strong> {analysis_result['analysis_summary']['total_lines_of_code']:,}Ï§Ñ</p>
                </div>
                
                <div class="stage-card">
                    <span class="emoji">üß™</span>
                    <h3>ÌÖåÏä§Ìä∏ ÏûêÎèôÌôî</h3>
                    <p><strong>ÏÉÅÌÉú:</strong> <span class="status-badge status-success">ÏôÑÎ£å</span></p>
                    <p><strong>Ï¥ù ÌÖåÏä§Ìä∏:</strong> {test_result.total_tests}Í∞ú</p>
                    <p><strong>ÌÜµÍ≥º:</strong> {test_result.passed_tests}Í∞ú</p>
                    <p><strong>Ïã§Ìå®:</strong> {test_result.failed_tests}Í∞ú</p>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {(test_result.passed_tests/test_result.total_tests*100) if test_result.total_tests > 0 else 0}%"></div>
                    </div>
                </div>
                
                <div class="stage-card">
                    <span class="emoji">üìö</span>
                    <h3>Î¨∏ÏÑúÌôî ÏÉùÏÑ±</h3>
                    <p><strong>ÏÉÅÌÉú:</strong> <span class="status-badge status-success">ÏôÑÎ£å</span></p>
                    <p><strong>ÏÑúÎπÑÏä§:</strong> {len(doc_result.services)}Í∞ú</p>
                    <p><strong>ÏÉùÏÑ±Îêú Î¨∏ÏÑú:</strong> 4Í∞ú</p>
                    <p><strong>API ÏóîÎìúÌè¨Ïù∏Ìä∏:</strong> {sum(len(service.endpoints) for service in doc_result.services)}Í∞ú</p>
                </div>
                
                <div class="stage-card">
                    <span class="emoji">üìã</span>
                    <h3>Ï¢ÖÌï© Î≥¥Í≥†ÏÑú</h3>
                    <p><strong>ÏÉÅÌÉú:</strong> <span class="status-badge status-success">ÏôÑÎ£å</span></p>
                    <p><strong>HTML Î≥¥Í≥†ÏÑú:</strong> ‚úÖ</p>
                    <p><strong>JSON Îç∞Ïù¥ÌÑ∞:</strong> ‚úÖ</p>
                    <p><strong>Î°úÍ∑∏ ÌååÏùº:</strong> ‚úÖ</p>
                </div>
            </div>
            
            <h2>üìà ÏÉÅÏÑ∏ Í≤∞Í≥º</h2>
            
            <h3>ÏΩîÎìú Î∂ÑÏÑù Í≤∞Í≥º</h3>
            <table>
                <tr>
                    <th>Ìï≠Î™©</th>
                    <th>Í∞í</th>
                    <th>ÏÑ§Î™Ö</th>
                </tr>
                <tr>
                    <td>Î∂ÑÏÑùÎêú ÌååÏùº</td>
                    <td>{analysis_result['analysis_summary']['files_analyzed']}Í∞ú</td>
                    <td>Python ÏÜåÏä§ ÌååÏùº</td>
                </tr>
                <tr>
                    <td>Ï¥ù ÏΩîÎìú ÎùºÏù∏</td>
                    <td>{analysis_result['analysis_summary']['total_lines_of_code']:,}Ï§Ñ</td>
                    <td>Ï£ºÏÑù Î∞è Îπà Ï§Ñ Ìè¨Ìï®</td>
                </tr>
                <tr>
                    <td>Ï¥ù Ìï®Ïàò</td>
                    <td>{analysis_result['analysis_summary']['total_functions']}Í∞ú</td>
                    <td>ÏùºÎ∞ò Ìï®Ïàò + ÎπÑÎèôÍ∏∞ Ìï®Ïàò</td>
                </tr>
                <tr>
                    <td>Ï¥ù ÌÅ¥ÎûòÏä§</td>
                    <td>{analysis_result['analysis_summary']['total_classes']}Í∞ú</td>
                    <td>ÏÇ¨Ïö©Ïûê Ï†ïÏùò ÌÅ¥ÎûòÏä§</td>
                </tr>
            </table>
            
            <h3>ÌÖåÏä§Ìä∏ Í≤∞Í≥º</h3>
            <table>
                <tr>
                    <th>Ìï≠Î™©</th>
                    <th>Í∞í</th>
                    <th>ÎπÑÏú®</th>
                </tr>
                <tr>
                    <td>Ï¥ù ÌÖåÏä§Ìä∏</td>
                    <td>{test_result.total_tests}Í∞ú</td>
                    <td>100%</td>
                </tr>
                <tr>
                    <td>ÌÜµÍ≥ºÌïú ÌÖåÏä§Ìä∏</td>
                    <td>{test_result.passed_tests}Í∞ú</td>
                    <td>{(test_result.passed_tests/test_result.total_tests*100) if test_result.total_tests > 0 else 0:.1f}%</td>
                </tr>
                <tr>
                    <td>Ïã§Ìå®Ìïú ÌÖåÏä§Ìä∏</td>
                    <td>{test_result.failed_tests}Í∞ú</td>
                    <td>{(test_result.failed_tests/test_result.total_tests*100) if test_result.total_tests > 0 else 0:.1f}%</td>
                </tr>
                <tr>
                    <td>Í±¥ÎÑàÎõ¥ ÌÖåÏä§Ìä∏</td>
                    <td>{test_result.skipped_tests}Í∞ú</td>
                    <td>{(test_result.skipped_tests/test_result.total_tests*100) if test_result.total_tests > 0 else 0:.1f}%</td>
                </tr>
            </table>
            
            <div class="summary">
                <h3>üéØ Ï£ºÏöî ÏÑ±Í≥º</h3>
                <ul>
                    <li><strong>ÏΩîÎìú ÌíàÏßà Ìñ•ÏÉÅ:</strong> ÏûêÎèôÌôîÎêú ÏΩîÎìú Î∂ÑÏÑùÏúºÎ°ú ÌíàÏßà Ïù¥Ïäà Ï°∞Í∏∞ Î∞úÍ≤¨</li>
                    <li><strong>ÌÖåÏä§Ìä∏ ÏûêÎèôÌôî:</strong> {test_result.total_tests}Í∞úÏùò ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ ÏûêÎèô ÏÉùÏÑ± Î∞è Ïã§Ìñâ</li>
                    <li><strong>Î¨∏ÏÑúÌôî ÏôÑÏÑ±:</strong> API Î¨∏ÏÑú, README, ÏïÑÌÇ§ÌÖçÏ≤ò Î¨∏ÏÑú ÏûêÎèô ÏÉùÏÑ±</li>
                    <li><strong>Í∞úÎ∞ú Ìö®Ïú®ÏÑ±:</strong> ÏàòÎèô ÏûëÏóÖ ÏãúÍ∞Ñ ÎåÄÌè≠ Îã®Ï∂ï</li>
                </ul>
            </div>
            
            <div class="summary">
                <h3>üìã Îã§Ïùå Îã®Í≥Ñ Í∂åÏû•ÏÇ¨Ìï≠</h3>
                <ul>
                    <li>Ïã§Ìå®Ìïú ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ Í≤ÄÌÜ† Î∞è ÏàòÏ†ï</li>
                    <li>ÏΩîÎìú Ïª§Î≤ÑÎ¶¨ÏßÄ {test_result.overall_coverage:.1f}% ‚Üí 80% Ïù¥ÏÉÅ Î™©Ìëú</li>
                    <li>Ï†ïÍ∏∞Ï†ÅÏù∏ ÏûêÎèôÌôî Ïã§Ìñâ Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ï</li>
                    <li>CI/CD ÌååÏù¥ÌîÑÎùºÏù∏Ïóê ÏûêÎèôÌôî ÎèÑÍµ¨ ÌÜµÌï©</li>
                </ul>
            </div>
        </div>
        
        <div class="footer">
            <p>ü§ñ AICC Ïª§ÏÑú AI ÏûêÎèôÌôî ÏãúÏä§ÌÖú | ÏÉùÏÑ±ÏùºÏãú: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            <p>Ïù¥ Î≥¥Í≥†ÏÑúÎäî ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.</p>
        </div>
    </div>
</body>
</html>
"""
        
        # HTML Î≥¥Í≥†ÏÑú Ï†ÄÏû•
        html_path = self.output_dir / "automation_summary.html"
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        # JSON Î≥¥Í≥†ÏÑú Ï†ÄÏû•
        import json
        json_path = self.output_dir / "automation_summary.json"
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=str)
        
        logger.info(f"Ï¢ÖÌï© Î≥¥Í≥†ÏÑú Ï†ÄÏû•: {html_path}")

def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    parser = argparse.ArgumentParser(description='AICC 3.5 ÏûêÎèôÌôî Ïã§ÌñâÍ∏∞')
    parser.add_argument('--mode', choices=['full', 'analysis', 'test', 'docs'], 
                       default='full', help='Ïã§Ìñâ Î™®Îìú ÏÑ†ÌÉù')
    parser.add_argument('--project-root', default='.', help='ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨')
    
    args = parser.parse_args()
    
    project_root = os.path.abspath(args.project_root)
    runner = AIAutomationRunner(project_root)
    
    async def run_automation():
        try:
            if args.mode == 'full':
                print("üöÄ Ï†ÑÏ≤¥ ÏûêÎèôÌôî ÌîÑÎ°úÏÑ∏Ïä§ ÏãúÏûë...")
                result = await runner.run_full_automation()
                
                print("\nüéâ ÏûêÎèôÌôî ÏôÑÎ£å!")
                print(f"üìä Î∂ÑÏÑùÎêú ÌååÏùº: {result['stages']['code_analysis']['files_analyzed']}Í∞ú")
                print(f"üß™ Ïã§ÌñâÎêú ÌÖåÏä§Ìä∏: {result['stages']['test_automation']['total_tests']}Í∞ú")
                print(f"üìö Î¨∏ÏÑúÌôîÎêú ÏÑúÎπÑÏä§: {result['stages']['documentation']['services_documented']}Í∞ú")
                print(f"üìã Î≥¥Í≥†ÏÑú: {result['stages']['summary_report']['report_path']}")
                
            elif args.mode == 'analysis':
                print("üìä ÏΩîÎìú Î∂ÑÏÑù ÏãúÏûë...")
                result = await runner.run_code_analysis_only()
                print(f"‚úÖ Î∂ÑÏÑù ÏôÑÎ£å: {result['analysis_summary']['files_analyzed']}Í∞ú ÌååÏùº")
                
            elif args.mode == 'test':
                print("üß™ ÌÖåÏä§Ìä∏ ÏûêÎèôÌôî ÏãúÏûë...")
                result = await runner.run_test_automation_only()
                print(f"‚úÖ ÌÖåÏä§Ìä∏ ÏôÑÎ£å: {result['passed_tests']}/{result['total_tests']} ÌÜµÍ≥º")
                
            elif args.mode == 'docs':
                print("üìö Î¨∏ÏÑúÌôî ÏãúÏûë...")
                result = await runner.run_documentation_only()
                print(f"‚úÖ Î¨∏ÏÑúÌôî ÏôÑÎ£å: {result['services_documented']}Í∞ú ÏÑúÎπÑÏä§")
                
        except Exception as e:
            print(f"‚ùå Ïã§Ìñâ Ïã§Ìå®: {e}")
            logger.exception("ÏûêÎèôÌôî Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù")
            return 1
        
        return 0
    
    return asyncio.run(run_automation())

if __name__ == "__main__":
    sys.exit(main()) 